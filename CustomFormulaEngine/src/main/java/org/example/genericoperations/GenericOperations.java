package org.example.genericoperations;

/**
 * Предоставляет обобщенные операции для чисел.
 *
 * @param <T> тип чисел, над которыми выполняются операции
 */
public interface GenericOperations<T extends Number> {
    /**
     * Складывает два числа.
     *
     * @param op1 первое число
     * @param op2 второе число
     * @return результат сложения
     */
    T add(T op1, T op2);

    /**
     * Вычитает одно число из другого.
     *
     * @param op1 число, из которого вычитают
     * @param op2 число, которое вычитают
     * @return результат вычитания
     */
    T sub(T op1, T op2);

    /**
     * Делит одно число на другое.
     *
     * @param op1 делимое
     * @param op2 делитель
     * @return результат деления
     */
    T div(T op1, T op2);

    /**
     * Умножает два числа.
     *
     * @param op1 первый множитель
     * @param op2 второй множитель
     * @return результат умножения
     */
    T mul(T op1, T op2);

    /**
     * Отрицание числа.
     *
     * @param op первый множитель
     * @return результат умножения
     */
    T negation(T op);

    /**
     * Возводит число в степень.
     *
     * @param op1 число, которое возводят в степень
     * @param op2 степень
     * @return результат возведения в степень
     */
    T pow(T op1, T op2);

    /**
     * Вычисляет синус числа.
     *
     * @param op число, у которого вычисляют синус
     * @return синус числа
     */
    T sin(T op);

    /**
     * Вычисляет косинус числа.
     *
     * @param op число, у которого вычисляют косинус
     * @return косинус числа
     */
    T cos(T op);

    /**
     * Вычисляет тангенс числа.
     *
     * @param op число, у которого вычисляют тангенс
     * @return тангенс числа
     */
    T tan(T op);

    /**
     * Выполняет логическую конъюнкцию двух чисел.
     *
     * @param op1 первое число
     * @param op2 второе число
     * @return результат логической конъюнкции
     */
    T conjunction(T op1, T op2);

    /**
     * Выполняет логическую дизъюнкцию двух чисел.
     *
     * @param op1 первое число
     * @param op2 второе число
     * @return результат логической дизъюнкции
     */
    T disjunction(T op1, T op2);

    /**
     * Выполняет логическое отрицание.
     *
     * @param op первое число
     * @return результат логической дизъюнкции
     */
    T logicalNegation(T op);
}